// <auto-generated />
using System;
using E_Veterinar.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace E_Veterinar.Migrations
{
    [DbContext(typeof(eveterinarContext))]
    [Migration("20211125231106_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("E_Veterinar.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("E_Veterinar.Models.Evidenca", b =>
                {
                    b.Property<decimal>("IdEvidence")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_EVIDENCE");

                    b.Property<decimal>("Cena")
                        .HasColumnType("money")
                        .HasColumnName("CENA");

                    b.Property<DateTime?>("DatumKonca")
                        .HasColumnType("datetime")
                        .HasColumnName("DATUM_KONCA");

                    b.Property<DateTime?>("DatumZacetka")
                        .HasColumnType("datetime")
                        .HasColumnName("DATUM_ZACETKA");

                    b.Property<decimal>("IdNarocilo")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_NAROCILO");

                    b.Property<decimal?>("IdVeterinar")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_VETERINAR");

                    b.HasKey("IdEvidence");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdEvidence"), false);

                    b.HasIndex(new[] { "IdNarocilo" }, "JE_BILO_OPRAVLJENO_FK");

                    b.HasIndex(new[] { "IdVeterinar", "DatumZacetka", "DatumKonca" }, "JE_ZABELEZENO_V_FK");

                    b.ToTable("EVIDENCA", (string)null);
                });

            modelBuilder.Entity("E_Veterinar.Models.Izdelek", b =>
                {
                    b.Property<decimal>("IdIzdelek")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_IZDELEK");

                    b.Property<decimal>("Cena")
                        .HasColumnType("money")
                        .HasColumnName("CENA");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IME");

                    b.Property<string>("Opis")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("OPIS");

                    b.HasKey("IdIzdelek");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdIzdelek"), false);

                    b.ToTable("IZDELEK", (string)null);
                });

            modelBuilder.Entity("E_Veterinar.Models.Narocilo", b =>
                {
                    b.Property<decimal>("IdNarocilo")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_NAROCILO");

                    b.Property<DateTime?>("DatumNarocila")
                        .HasColumnType("datetime")
                        .HasColumnName("DATUM_NAROCILA");

                    b.Property<decimal?>("IdStranka")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_STRANKA");

                    b.Property<decimal>("ZahtevanaKolicina")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ZAHTEVANA_KOLICINA");

                    b.HasKey("IdNarocilo");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdNarocilo"), false);

                    b.HasIndex(new[] { "IdStranka" }, "JE_NAROCILA_FK");

                    b.ToTable("NAROCILO", (string)null);
                });

            modelBuilder.Entity("E_Veterinar.Models.Postum", b =>
                {
                    b.Property<decimal>("Stevilka")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("STEVILKA");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("NAZIV");

                    b.HasKey("Stevilka");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Stevilka"), false);

                    b.ToTable("POSTA", (string)null);
                });

            modelBuilder.Entity("E_Veterinar.Models.Storitev", b =>
                {
                    b.Property<decimal>("IdStoritev")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_STORITEV");

                    b.Property<string>("OpisStoritve")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("OPIS_STORITVE");

                    b.HasKey("IdStoritev");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdStoritev"), false);

                    b.ToTable("STORITEV", (string)null);
                });

            modelBuilder.Entity("E_Veterinar.Models.Stranka", b =>
                {
                    b.Property<decimal>("IdStranka")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_STRANKA");

                    b.Property<string>("AspNetIDId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IME");

                    b.Property<string>("Kraj")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("KRAJ");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NASLOV");

                    b.Property<string>("Priimek")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PRIIMEK");

                    b.Property<decimal>("Stevilka")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("STEVILKA");

                    b.HasKey("IdStranka");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdStranka"), false);

                    b.HasIndex("AspNetIDId");

                    b.HasIndex(new[] { "Stevilka" }, "JE_NA_FK");

                    b.ToTable("STRANKA", (string)null);
                });

            modelBuilder.Entity("E_Veterinar.Models.Termin", b =>
                {
                    b.Property<decimal>("IdVeterinar")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_VETERINAR");

                    b.Property<DateTime>("DatumZacetka")
                        .HasColumnType("datetime")
                        .HasColumnName("DATUM_ZACETKA");

                    b.Property<DateTime>("DatumKonca")
                        .HasColumnType("datetime")
                        .HasColumnName("DATUM_KONCA");

                    b.Property<decimal?>("IdStranka")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_STRANKA");

                    b.Property<bool>("JePotrjen")
                        .HasColumnType("bit")
                        .HasColumnName("JE_POTRJEN");

                    b.Property<bool>("JeZaseden")
                        .HasColumnType("bit")
                        .HasColumnName("JE_ZASEDEN");

                    b.HasKey("IdVeterinar", "DatumZacetka", "DatumKonca");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdVeterinar", "DatumZacetka", "DatumKonca"), false);

                    b.HasIndex(new[] { "IdStranka" }, "JE_PREVZELA_FK");

                    b.HasIndex(new[] { "IdVeterinar" }, "JE_RAZPISAL_FK");

                    b.ToTable("TERMIN", (string)null);
                });

            modelBuilder.Entity("E_Veterinar.Models.Veterinar", b =>
                {
                    b.Property<decimal>("IdVeterinar")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_VETERINAR");

                    b.Property<string>("AspNetIDId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("IME");

                    b.Property<string>("Kraj")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("KRAJ");

                    b.Property<bool>("NaDom")
                        .HasColumnType("bit")
                        .HasColumnName("NA_DOM");

                    b.Property<string>("Priimek")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("PRIIMEK");

                    b.Property<decimal>("Stevilka")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("STEVILKA");

                    b.HasKey("IdVeterinar");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("IdVeterinar"), false);

                    b.HasIndex("AspNetIDId");

                    b.HasIndex(new[] { "Stevilka" }, "IMA_VETERINO_NA_FK");

                    b.ToTable("VETERINAR", (string)null);
                });

            modelBuilder.Entity("E_Veterinar.Models.Zaloga", b =>
                {
                    b.Property<decimal>("IdIzdelek")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_IZDELEK");

                    b.Property<decimal>("IdVeterinar")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_VETERINAR");

                    b.Property<decimal>("Kolicina")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("KOLICINA");

                    b.HasKey("IdIzdelek", "IdVeterinar");

                    b.HasIndex(new[] { "IdVeterinar" }, "IMA_FK");

                    b.HasIndex(new[] { "IdIzdelek" }, "JE_OD_FK");

                    b.ToTable("ZALOGA", (string)null);
                });

            modelBuilder.Entity("JeBilaOpravljena", b =>
                {
                    b.Property<decimal>("IdStoritev")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_STORITEV");

                    b.Property<decimal>("IdEvidence")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_EVIDENCE");

                    b.HasKey("IdStoritev", "IdEvidence");

                    b.HasIndex(new[] { "IdEvidence" }, "JE_BILA_OPRAVLJENA2_FK");

                    b.HasIndex(new[] { "IdStoritev" }, "JE_BILA_OPRAVLJENA_FK");

                    b.ToTable("JE_BILA_OPRAVLJENA", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Zahteva", b =>
                {
                    b.Property<decimal>("IdIzdelek")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_IZDELEK");

                    b.Property<decimal>("IdNarocilo")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_NAROCILO");

                    b.Property<decimal>("IdVeterinar")
                        .HasColumnType("numeric(18,0)")
                        .HasColumnName("ID_VETERINAR");

                    b.HasKey("IdIzdelek", "IdNarocilo", "IdVeterinar");

                    b.HasIndex(new[] { "IdIzdelek", "IdVeterinar" }, "ZAHTEVA2_FK");

                    b.HasIndex(new[] { "IdNarocilo" }, "ZAHTEVA_FK");

                    b.ToTable("ZAHTEVA", (string)null);
                });

            modelBuilder.Entity("E_Veterinar.Models.Evidenca", b =>
                {
                    b.HasOne("E_Veterinar.Models.Narocilo", "IdNarociloNavigation")
                        .WithMany("Evidencas")
                        .HasForeignKey("IdNarocilo")
                        .IsRequired()
                        .HasConstraintName("FK_EVIDENCA_JE_BILO_O_NAROCILO");

                    b.HasOne("E_Veterinar.Models.Termin", "Termin")
                        .WithMany("Evidencas")
                        .HasForeignKey("IdVeterinar", "DatumZacetka", "DatumKonca")
                        .HasConstraintName("FK_EVIDENCA_JE_ZABELE_TERMIN");

                    b.Navigation("IdNarociloNavigation");

                    b.Navigation("Termin");
                });

            modelBuilder.Entity("E_Veterinar.Models.Narocilo", b =>
                {
                    b.HasOne("E_Veterinar.Models.Stranka", "IdStrankaNavigation")
                        .WithMany("Narocilos")
                        .HasForeignKey("IdStranka")
                        .HasConstraintName("FK_NAROCILO_JE_NAROCI_STRANKA");

                    b.Navigation("IdStrankaNavigation");
                });

            modelBuilder.Entity("E_Veterinar.Models.Stranka", b =>
                {
                    b.HasOne("E_Veterinar.Models.ApplicationUser", "AspNetID")
                        .WithMany()
                        .HasForeignKey("AspNetIDId");

                    b.HasOne("E_Veterinar.Models.Postum", "StevilkaNavigation")
                        .WithMany("Strankas")
                        .HasForeignKey("Stevilka")
                        .IsRequired()
                        .HasConstraintName("FK_STRANKA_JE_NA_POSTA");

                    b.Navigation("AspNetID");

                    b.Navigation("StevilkaNavigation");
                });

            modelBuilder.Entity("E_Veterinar.Models.Termin", b =>
                {
                    b.HasOne("E_Veterinar.Models.Stranka", "IdStrankaNavigation")
                        .WithMany("Termins")
                        .HasForeignKey("IdStranka")
                        .HasConstraintName("FK_TERMIN_JE_PREVZE_STRANKA");

                    b.HasOne("E_Veterinar.Models.Veterinar", "IdVeterinarNavigation")
                        .WithMany("Termins")
                        .HasForeignKey("IdVeterinar")
                        .IsRequired()
                        .HasConstraintName("FK_TERMIN_JE_RAZPIS_VETERINA");

                    b.Navigation("IdStrankaNavigation");

                    b.Navigation("IdVeterinarNavigation");
                });

            modelBuilder.Entity("E_Veterinar.Models.Veterinar", b =>
                {
                    b.HasOne("E_Veterinar.Models.ApplicationUser", "AspNetID")
                        .WithMany()
                        .HasForeignKey("AspNetIDId");

                    b.HasOne("E_Veterinar.Models.Postum", "StevilkaNavigation")
                        .WithMany("Veterinars")
                        .HasForeignKey("Stevilka")
                        .IsRequired()
                        .HasConstraintName("FK_VETERINA_IMA_VETER_POSTA");

                    b.Navigation("AspNetID");

                    b.Navigation("StevilkaNavigation");
                });

            modelBuilder.Entity("E_Veterinar.Models.Zaloga", b =>
                {
                    b.HasOne("E_Veterinar.Models.Izdelek", "IdIzdelekNavigation")
                        .WithMany("Zalogas")
                        .HasForeignKey("IdIzdelek")
                        .IsRequired()
                        .HasConstraintName("FK_ZALOGA_JE_OD_IZDELEK");

                    b.HasOne("E_Veterinar.Models.Veterinar", "IdVeterinarNavigation")
                        .WithMany("Zalogas")
                        .HasForeignKey("IdVeterinar")
                        .IsRequired()
                        .HasConstraintName("FK_ZALOGA_IMA_VETERINA");

                    b.Navigation("IdIzdelekNavigation");

                    b.Navigation("IdVeterinarNavigation");
                });

            modelBuilder.Entity("JeBilaOpravljena", b =>
                {
                    b.HasOne("E_Veterinar.Models.Evidenca", null)
                        .WithMany()
                        .HasForeignKey("IdEvidence")
                        .IsRequired()
                        .HasConstraintName("FK_JE_BILA__JE_BILA_O_EVIDENCA");

                    b.HasOne("E_Veterinar.Models.Storitev", null)
                        .WithMany()
                        .HasForeignKey("IdStoritev")
                        .IsRequired()
                        .HasConstraintName("FK_JE_BILA__JE_BILA_O_STORITEV");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("E_Veterinar.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("E_Veterinar.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("E_Veterinar.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("E_Veterinar.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Zahteva", b =>
                {
                    b.HasOne("E_Veterinar.Models.Narocilo", null)
                        .WithMany()
                        .HasForeignKey("IdNarocilo")
                        .IsRequired()
                        .HasConstraintName("FK_ZAHTEVA_ZAHTEVA_NAROCILO");

                    b.HasOne("E_Veterinar.Models.Zaloga", null)
                        .WithMany()
                        .HasForeignKey("IdIzdelek", "IdVeterinar")
                        .IsRequired()
                        .HasConstraintName("FK_ZAHTEVA_ZAHTEVA2_ZALOGA");
                });

            modelBuilder.Entity("E_Veterinar.Models.Izdelek", b =>
                {
                    b.Navigation("Zalogas");
                });

            modelBuilder.Entity("E_Veterinar.Models.Narocilo", b =>
                {
                    b.Navigation("Evidencas");
                });

            modelBuilder.Entity("E_Veterinar.Models.Postum", b =>
                {
                    b.Navigation("Strankas");

                    b.Navigation("Veterinars");
                });

            modelBuilder.Entity("E_Veterinar.Models.Stranka", b =>
                {
                    b.Navigation("Narocilos");

                    b.Navigation("Termins");
                });

            modelBuilder.Entity("E_Veterinar.Models.Termin", b =>
                {
                    b.Navigation("Evidencas");
                });

            modelBuilder.Entity("E_Veterinar.Models.Veterinar", b =>
                {
                    b.Navigation("Termins");

                    b.Navigation("Zalogas");
                });
#pragma warning restore 612, 618
        }
    }
}
